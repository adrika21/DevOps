ASSIGNMENT 3:

NOTE: Do not forget to see manual page using "--help" option in command when searching for options/commands for a particular task.

1. Install Docker, either on your native OS or on a VM. Make sure it runs. type "docker -v" to check if it's installed.
   try below commands for help
	docker --help  ---> This command shows all available options and commands to work with images and containers
	docker images --help ---> This command shows all the avaialble options and commands to work with docker images
	docker ps --help ---> This command shows all the avaialble options and commands to work with docker containers

2. Find a image from dockerhub of your choice(recommeded: nginx), don't use browser, pull the official image from dockerhub

3. List all the available images in your machine/vm, make sure you see recently pulled image in the list.

4. Find out the "Full" ImageId of the image that you pulled and write it below. :  
	sha256:c070d36aed6f1d6a0cadc7e863f6eabd5f27a62429d32cbb538efab49dd632db

5. Create a container of your image : 
	--   docker run 5a3221f0137b -t -d

6. List all the running containers : 
	
             docker container ps

7. List all the running and stopped containers :
	 
         --   docker container ps -a

8. Find out the "Full" containerId of the container and write it below. 
	:-  docker container inspect 65b6b77c6ef9 :  "Id": "65b6b77c6ef9622bb4471d8e0c22365b70637649937cef2ad1e3818840465474"

9. Find out how many image layers are used to build this image:	    

 "Layers": [
                "sha256:1c95c77433e8d7bf0f519c9d8c9ca967e2603f0defbf379130d9a841cca2e28e",
                "sha256:002a63507c1caa5cc0e1af10e5b888f6ba20d06275e989a452581d789a48948e",
                "sha256:12fdf55172df870a613a79c4757006c5b28e66a8621c3e26916678378568f078"
            ]


10. Get the Apache Tomcat 7 server image from the docker hub: 
	docker image pull tomcat:7

11. Run the Apache Tomcat 7, I mean create a container of Apache Tomcat : 
	docker run -t -d b067a52fdaf7

12. Find out what is the IP Address of the Apache Tomcat Container that it is running on :  docker container inspect dcc7d3913d94 :IPAddress": "172.17.0.5

13. Which Port it is using :  "Ports": {
                "8080/tcp": null
            },
14. Try to access the Tomcat's home page from your machine/vm.
15. What is the disk size of Apache Tomcat image : 
	463 MB
16. Find out list of all environment variables that is configured for tomcat image, can you see JAVA_HOME and CATALINA_HOME? What did you notice about it?
17. Find out which port is exposed for tomcat?
18. Run multiple conntainers of tomcat on different port and access it's home page.

19. Pull ubuntu os from dockerhub, try to pull 2 images of ubuntu, Except the latest one.
 	docker pull ubuntu:14.04
	docker pull ubuntu:18.04

20. Run the container of ubuntu in attached mode.

	docker run -it 2c5e00d77a67  bash

21. Run the container of another ubuntu in detached mode.

	docker run -d -it  a2a15febcdf3 tail -f /dev/null

22. Check how many ubuntu containers are running and stopped

	one container running in detatched mode is running and other container is exited

23. Is the tomcat container running? If no, start one : Running

24. Check the logs, generated by tomcat container(don't forget to make request to tomcat's home page to see the log).
	
	docker container logs 2e3fbf3a71ff

25. Check if ubuntu conatiner is running? If no, start one in attached mode to the terminal.
	docker exec -it  

26. Login as root user in ubuntu container
	sudo chown ubuntu:ubuntu -R /opt

27. Create a file with any name in root directory
	cd /opt/
	mkdir myapp
	cd myapp/
	touch test.txt
	nano test.txt 
	cat test.txt

28. Install software of your choice in ubuntu container using "apt-get install"
	
	apt-get update
	apyt-get install nginx

29. Now exit the ubuntu shell, are you back to your host machine, if not, come back to the host machine.
	exit

30. Check if the ubuntu container is running.
	Yes

31. Create a new ubuntu container out of the same image as that previous container in attached mode.
	docker run -t 9f3d7c446553
32. Login as a root user
	docker exec -u 0 -it cf8784437b7 bash

33. Check if you can see the file created in previous container, you will not see the file as well as software that you installed in the previous container. Now kill this Container.
	no
	docker kill cf878447b7b
34. Do you have the previous ubuntu container where you created the file and installed the software? If no reapeat step 25 to 29.
	yes
35. Create an Image out of the existing container.
	docker commit -m= "Latest image" awesome_banach ubuntu:rolling
36. Now Create a Container out of this image and login into it to see if you can see the file and software installed by you in the previous container.
	docker run -t ubuntu:rolling
	docker exec -u 0 -it 438014c80bb7 bash
	ls	
	yes, able to see
37. Do you have running tomcat container? If yes, Stop it and kill all tomcat container.
	Done
38. Create an index.html file with following code in it:-
	<h1>This is Tomcat Container</h1>
Now, Start a tomcat container in such a way that on hitting its URL for home page it should show the above html page.
39. type below command:-
	docker images --help
Now, try to run command that proves the concept of following three options:-
1. -a

	docker ps -a
2. -f
	docker kill -f tomcat
3. -q
write atleast 1 command using each option above and prove their concepts as described in the --help.


40. type below command:-
	docker ps --help
Now, try to run command that proves the concept of following six options:-
1. -a
docker ps-a
2. -f
docker kill -f tomcat
3. -q

4. -n
docker kill -n tomcat
5. -l
docker kill -l tomcat
6. -s
docker kill -s tomcat

write atleast 1 command using each option above and prove their concepts as described in the --help.


41. Type below command:-
	docker --help
	done

you will various sections of commands apart from options like "Managemnet Commands" and "Commands".


Write some texts below describing the use of "Management Commands".

These commands help in providing detailed info and updating the set-up.
eg: image, container, secret

Use each command mentioned below and prove its concepts as described in the --help desription. write what you have understood from the output of the command after its successful execution.
1. cp

docker cp test.txt 438014c80bb7:/test.txt

2. create

docker create 438014c80bb7 

3. export

docker export 438014c80bb7

4. history

docker history ffa63b5bd550

5. info

docker info

6. login

docker login 18.06.1-ce
username 
password

7. logout

docker logout 18.06.1-ce

8. rename

docker rename laughing_wingNew_Name

9. save

docker save ffa63b5bd550

10. stats

docker stats 96e64ffa6839

11. top

docker top 438014c80bb7

42. Kill all running container in one liner command.

docker stop $(docker ps-a-q)

43. Delete all images in one liner command.

docker rm $(docker ps-a-q)

44. Create a simple Dockerfile, build it and run it.

45. Create one or more Dockerfile that demostrate the following commands in Dockerfile (Write a PoC for each in one or more Dockerfile)
	1. USER
	2. RUN
	3. ENV
	4. CMD
	5. RUN
	6. ENTRYPOINT
	7. EXPOSE
	8. VOLUME
	
46. Dockerhub:-
	Find a application you care about on docker hub.
	Launch the container.
	Install another application in it.
	Save (commit) the image.
	Upload that to docker hub in your account and share it with a colleague, ask them to use your image and run the container out of it in their machine/vm.